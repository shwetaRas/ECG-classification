"""This algorithm does the following
 - EM Clustering 
 - Testing with Testing Data
 - Accurary and Generation
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.mixture import GaussianMixture

#take data from the feature_output file generated by fcbfs algorithm
file = open(r'features_output.txt', 'r')
select_attr = []
for l in file:
    select_attr.append(l.split(",")[1].split('\n')[0])

select_attr  = list(map(int, select_attr[1:]))
select_attr.sort()

#take the training data from output.txt generated by the compression algorithm
data = []
file = open(r'output.txt', 'r')
for line in file:
    data.append(line.split(','))
    
np_data = np.array(data)

#select the attributes in the data mentioned by attribute selection model
np_selected = np_data[:,np.r_[select_attr]]

#train the EM clustering model based on selected attributes
X_train = np_selected
gmm = GaussianMixture(n_components=2, covariance_type='diag')
gmm.fit(X_train)

print("Training Completed.\n")

#Ranges Generated

means = np.array(gmm.means_)
std = np.array(gmm.covariances_)

print("\nClustering Means")
new_mean = np.round(means, decimals = 3)
print(new_mean)

print("\nClustering Standard Deviation")
new_std = np.round(std, decimals = 3)
print(new_std)


class1 = np.column_stack((new_mean[0], new_std[0]))
class2 = np.column_stack((new_mean[1], new_std[1]))
print("class A")
print("   mean   ", " std  ")
print(class1)
print("\n")
print("class B")
print("   mean   ", " std  ")
print(class2)


#load test data
test_data = []
file = open(r'output_testing.txt', 'r')
for line in file:
    test_data.append(line.split(','))
np_data_testing = np.array(test_data)
file.close()

#select selected attributes suggested by fcbfs 
np_test_selected = np_data_testing[:,np.r_[select_attr]]

print("Started Testing\n")
#predict the classes of the test data based on the training model
ans = gmm.predict(np_test_selected)
a_list = list(ans)

#write the set of predicted classes to a new file
f5 = open(r'output_class_compare.txt', 'w')
f5.write(str(a_list)[1:-1])
f5.close()

#Accuracy generation
actual_class = []
predicted_class = []

#read actual class labels from file
file1 = open(r'output_class_testing.txt', 'r')
for line in file1:
    actual_class = line.split(",")
actual_class = actual_class[:-1]
file1.close()
    
#read predicted class labels from file
file2 = open(r'output_class_compare.txt', 'r')
for line in file2:
    predicted_class = line.split(", ")
file2.close()


max_actual_class = max(set(actual_class), key=actual_class.count)
max_predicted_class = max(set(predicted_class), key=predicted_class.count)
if max_actual_class != max_predicted_class:
    actual_class = list(['1' if x=='0' else '0' for x in actual_class])


#build a class matrix
pospos = 0
negneg = 0
posneg = 0
negpos = 0
for iterator in range(len(actual_class)):
    if actual_class[iterator] == predicted_class[iterator]:
        if actual_class[iterator] == '0':
            pospos = pospos + 1
        if actual_class[iterator] == '1':
            negneg = negneg + 1
    else:
        if actual_class[iterator] == '0':
            posneg = posneg + 1
        if actual_class[iterator] == '1':
            negpos = negpos + 1

print("\n\n\n\n\n")
print("Finished making predictions for test data.\n")
print("x-axis: predicted class")
print("y-axis: actual class")
print("\n")
print("\tcls pos\tneg")
print("\tpos", pospos,posneg)
print("\tneg", negpos,negneg)

accuracy = (pospos+negneg)/(pospos+negneg+posneg+negpos)*100
print("\nAccuracy of the model : ", accuracy,"%")



